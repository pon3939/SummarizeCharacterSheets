AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SummarizeCharacterSheets

  SW2.5 のキャラクターシートをスプレッドシートに集計する StepFunctions

Parameters:
  PlayersSeasonIdIndexName:
    Type: String
    Default: season_id-name-index
    Description: プレイヤーテーブルのシーズンIDと名前のインデックス名

Resources:
  # Step Functions
  StockTradingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/stock_trader.asl.json
      DefinitionSubstitutions:
        StockCheckerFunctionArn: !GetAtt StockCheckerFunction.Arn
        StockSellerFunctionArn: !GetAtt StockSellerFunction.Arn
        StockBuyerFunctionArn: !GetAtt StockBuyerFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref TransactionTable
      Events:
        HourlyTradingSchedule:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the stock trading state machine every hour
            Enabled: False # This schedule is disabled by default to avoid incurring charges.
            Schedule: "rate(1 hour)"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref StockCheckerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockSellerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockBuyerFunction
        - DynamoDBWritePolicy:
            TableName: !Ref TransactionTable

  # Lambda
  StockCheckerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/stock_checker/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64

  StockSellerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock_seller/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64

  StockBuyerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock_buyer/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64

  # レベルキャップ登録Lambda
  InsertLevelCapsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: レベルキャップテーブルにレコードを追加する
      CodeUri: functions/insert_level_caps/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref SummarizeCharacterSheetsLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LevelCapsTable
      Environment:
        Variables:
          LEVEL_CAPS_TABLE_NAME: !Ref LevelCapsTable

  # PL登録Lambda
  InsertPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: PLテーブルにレコードを追加する
      CodeUri: functions/insert_players/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref SummarizeCharacterSheetsLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          PLAYERS_SEASON_ID_INDEX_NAME: !Ref PlayersSeasonIdIndexName

  # Layer
  SummarizeCharacterSheetsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: "layers/"
      Description: SummarizeCharacterSheets 用のレイヤー
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
      BuildArchitecture: x86_64

  # DynamoDB
  # レベルキャップ
  LevelCapsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: level_caps
      AttributeDefinitions:
        - AttributeName: "season_id"
          AttributeType: "N"
        - AttributeName: "start_datetime"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "season_id"
          KeyType: "HASH"
        - AttributeName: "start_datetime"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # PL
  PlayersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: players_temp
      AttributeDefinitions:
        - AttributeName: "season_id"
          AttributeType: "N"
        - AttributeName: "id"
          AttributeType: "N"
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "season_id"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: !Ref PlayersSeasonIdIndexName
          KeySchema:
            - AttributeName: "season_id"
              KeyType: "HASH"
            - AttributeName: "name"
              KeyType: "RANGE"
          Projection: { ProjectionType: "ALL" }
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # DynamoDB Auto Scaling
  # PL 読み込み
  PlayersReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join
        - "/"
        - - "table"
          - !Ref PlayersTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb

  # PL 書き込み
  PlayersWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join
        - "/"
        - - "table"
          - !Ref PlayersTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  # DynamoDB Auto Scaling Policy
  # PL 読み込み
  PlayersReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: PlayersReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref PlayersReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  # PL 書き込み
  PlayersWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: PlayersWriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref PlayersWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  TransactionTable:
    Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # Role
  # DynamoDB の Auto Scaling 用
  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"

Outputs:
  # StockTradingStateMachineHourlyTradingSchedule is an implicit Schedule event rule created out of Events key under Serverless::StateMachine
  # Find out more about other implicit resources you can reference within SAM
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
  StockTradingStateMachineArn:
    Description: "Stock Trading State machine ARN"
    Value: !Ref StockTradingStateMachine
  StockTradingStateMachineRoleArn:
    Description: "IAM Role created for Stock Trading State machine based on the specified SAM Policy Templates"
    Value: !GetAtt StockTradingStateMachineRole.Arn
